generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String      @unique
  passwordHash String      @map("password_hash")
  role         UserRole    @default(USER)
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  dealsAsBuyer     Deal[]      @relation("BuyerDeals")
  dealsAsSeller    Deal[]      @relation("SellerDeals")
  resolvedDeals    Deal[]      @relation("ResolvedDeals")
  auditLogs        AuditLog[]

  @@map("users")
}

model Deal {
  id          Int         @id @default(autoincrement())
  buyerId     Int         @map("buyer_id")
  sellerId    Int         @map("seller_id")
  title       String
  description String?
  amount      Decimal     @db.Decimal(10, 2)
  currency    String      @default("USD") @db.VarChar(3)
  status      DealStatus  @default(PENDING)
  resolvedBy  Int?        @map("resolved_by")
  resolvedAt  DateTime?   @map("resolved_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  buyer    User      @relation("BuyerDeals", fields: [buyerId], references: [id])
  seller   User      @relation("SellerDeals", fields: [sellerId], references: [id])
  resolver User?     @relation("ResolvedDeals", fields: [resolvedBy], references: [id])
  payments Payment[]

  @@map("deals")
}

model Payment {
  id                     Int           @id @default(autoincrement())
  dealId                 Int           @map("deal_id")
  amount                 Decimal       @db.Decimal(10, 2)
  currency               String        @default("USD") @db.VarChar(3)
  status                 PaymentStatus @default(PENDING)
  provider               String        @default("mock")
  providerPaymentId      String?       @map("provider_payment_id")
  providerTransactionId  String?       @map("provider_transaction_id")
  paymentMethod          String?       @map("payment_method")
  transactionId          String?       @unique @map("transaction_id")
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime      @updatedAt @map("updated_at")

  deal Deal @relation(fields: [dealId], references: [id])

  @@map("payments")
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  userId        Int?     @map("user_id")
  action        String
  entity        String
  entityId      Int?     @map("entity_id")
  details       Json?
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  actionContext Json?    @map("action_context")
  createdAt     DateTime @default(now()) @map("created_at")

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  provider        String
  eventId         String   @unique @map("event_id")
  eventType       String   @map("event_type")
  payload         Json
  signature       String?
  processed       Boolean  @default(false)
  processedAt     DateTime? @map("processed_at")
  createdAt       DateTime @default(now()) @map("created_at")

  @@index([provider, eventId])
  @@map("webhook_events")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum DealStatus {
  PENDING
  PENDING_REVIEW
  FUNDED
  IN_PROGRESS
  DISPUTED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
